/*******************************************************************************
 * CLI - A simple command line interface.
 * Copyright (C) 2019 Daniele Pallastrelli
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#include <boost/test/unit_test.hpp>
#include "cli/history.h"

using namespace cli;
using namespace cli::detail;

BOOST_AUTO_TEST_SUITE(HistorySuite)

BOOST_AUTO_TEST_CASE(NotFull)
{
    History history(10);
    history.NewCommand("item1");
    history.NewCommand("item2");
    history.NewCommand("item3");
    history.NewCommand("item4");

    BOOST_CHECK_EQUAL(history.Previous(""), "item4");
    BOOST_CHECK_EQUAL(history.Next(), "");
    BOOST_CHECK_EQUAL(history.Previous(""), "item4");
    BOOST_CHECK_EQUAL(history.Previous("item4"), "item3");
    BOOST_CHECK_EQUAL(history.Previous("item3"), "item2");
    BOOST_CHECK_EQUAL(history.Previous("item2"), "item1");
    BOOST_CHECK_EQUAL(history.Previous("item1"), "item1");
}

BOOST_AUTO_TEST_CASE(Full)
{
    History history(3);
    history.NewCommand("item1");
    history.NewCommand("item2");
    history.NewCommand("item3");
    history.NewCommand("item4");

    BOOST_CHECK_EQUAL(history.Previous(""), "item4");
    BOOST_CHECK_EQUAL(history.Next(), "");
    BOOST_CHECK_EQUAL(history.Previous(""), "item4");
    BOOST_CHECK_EQUAL(history.Previous("item4"), "item3");
    BOOST_CHECK_EQUAL(history.Previous("item3"), "item3");
    BOOST_CHECK_EQUAL(history.Previous("item3"), "item3");
    BOOST_CHECK_EQUAL(history.Previous("item3"), "item3");
    BOOST_CHECK_EQUAL(history.Next(), "item4");
    BOOST_CHECK_EQUAL(history.Next(), "");
}


BOOST_AUTO_TEST_CASE(Insertion)
{
    History history(10);
    history.NewCommand("item1");
    history.NewCommand("item2");
    history.NewCommand("item3");
    history.NewCommand("item4");

    BOOST_CHECK_EQUAL(history.Previous(""), "item4");
    BOOST_CHECK_EQUAL(history.Previous("item4"), "item3");
    BOOST_CHECK_EQUAL(history.Previous("foo"), "item2");
    BOOST_CHECK_EQUAL(history.Next(), "foo");
    BOOST_CHECK_EQUAL(history.Next(), "item4");
    BOOST_CHECK_EQUAL(history.Previous("item4"), "foo");
    BOOST_CHECK_EQUAL(history.Previous("foo"), "item2");
}

BOOST_AUTO_TEST_SUITE_END()