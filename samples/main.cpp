/*******************************************************************************
 * CLI - A simple command line interface.
 * Copyright (C) 2016 Daniele Pallastrelli
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#include "cli/cli.h"
#include "cli/remotecli.h"
#include "cli/server.h"

using namespace cli;
using namespace std;

/////////////


class AsyncInput
{
public:
    AsyncInput( boost::asio::io_service& ios, CliSession& _session ) :
        session( _session ),
        input( ios, ::dup( STDIN_FILENO ) )
    {
        session.Add( "exit", [this](std::ostream&){ session.Exit(); }, "Quit the application" );
        Read();
    }
    ~AsyncInput()
    {
        input.close();
    }

private:

    void Read()
    {
        session.Prompt();
        // Read a line of input entered by the user.
        boost::asio::async_read_until(
            input,
            inputBuffer,
            '\n',
            std::bind( &AsyncInput::NewLine, this,
                       std::placeholders::_1,
                       std::placeholders::_2 )
        );
    }

    void NewLine( const boost::system::error_code& error, std::size_t length )
    {
        if ( !error || error == boost::asio::error::not_found )
        {
            auto bufs = inputBuffer.data();
            std::size_t size = length;
            if ( !error ) --size; // tolgo il \n
            std::string s( boost::asio::buffers_begin( bufs ), boost::asio::buffers_begin( bufs ) + size );
            inputBuffer.consume( length );


            if ( session.Feed( s ) ) Read();
        }
        else
        {
            input.close();
        }
    }

    CliSession& session;
    boost::asio::streambuf inputBuffer;
    boost::asio::posix::stream_descriptor input;
};

/////////////

#include <stdio.h>
#include <termios.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/time.h>
#include <thread>

class PollKeyboardInput
{
public:
    explicit PollKeyboardInput(CliSession& _session) :
        session( _session )
    {
        session.Add( "exit", [this](std::ostream&){ session.Exit(); }, "Quit the application" );
        ChangeMode(1);
        servant = std::make_unique<std::thread>( [this](){ Read(); } );
        servant -> detach();
    }
    ~PollKeyboardInput()
    {
        run = false;
        ChangeMode(0);
    }

private:

    enum class Symbol { command, up, down, left, right, ignored };
    void Read()
    {
        session.Prompt();
        while (run)
        {
            auto symbol = GetInput();
            switch (symbol)
            {
                case Symbol::command:
                    if ( ! session.Feed( currentLine ) ) run = false;
                    currentLine.clear();
                    session.Prompt();
                    break;
                case Symbol::up:
                    ClearLine();
                    currentLine = session.PreviousCmd();
                    std::cout << currentLine << std::flush;
                    break;
                case Symbol::down:
                    ClearLine();
                    currentLine = session.NextCmd();
                    std::cout << currentLine << std::flush;
                    break;
                case Symbol::left:
                case Symbol::right:
                case Symbol::ignored:
                    break;
            }
        }
    }

    Symbol GetInput()
    {
        while (true)
        {
            while ( !KbHit() ) {}
            int ch = getchar();
            //std::cout << "== " << ch << std::endl;
            if ( ch == 127 ) // backspace
            {
                if ( currentLine.empty() ) continue;
                std::cout << "\b \b" << std::flush;
                currentLine.pop_back();
            }
            else if ( ch == 27 ) // symbol
            {
                ch = getchar();
                if ( ch == 91 ) // arrow keys
                {
                    ch = getchar();
                    switch( ch )
                    {
                        case 65: return Symbol::up; break;
                        case 66: return Symbol::down; break;
                        case 68: return Symbol::left; break;
                        case 67: return Symbol::right; break;
                    }
                }
            }
            else
            {
                const char c = static_cast<char>(ch);
                if ( c == '\n' )
                {
                    std::cout << std::endl;
                    return Symbol::command;
                }

                currentLine += c;
                std::cout << c << std::flush;
            }
        }
        return Symbol::ignored;
    }

    void ClearLine()
    {
        auto size = currentLine.size();
        std::string back( size, '\b' );
        std::string spaces( size, ' ' );
        std::cout << back << spaces << back << std::flush;
        currentLine.clear();
    }

    void ChangeMode(int dir)
    {
      if ( dir == 1 )
      {
        tcgetattr( STDIN_FILENO, &oldt);
        newt = oldt;
        newt.c_lflag &= ~( ICANON | ECHO );
        tcsetattr( STDIN_FILENO, TCSANOW, &newt);
      }
      else
        tcsetattr( STDIN_FILENO, TCSANOW, &oldt);
    }

    static int KbHit()
    {
      struct timeval tv;
      fd_set rdfs;

      tv.tv_sec = 1;
      tv.tv_usec = 0;

      FD_ZERO(&rdfs);
      FD_SET (STDIN_FILENO, &rdfs);

      select(STDIN_FILENO+1, &rdfs, NULL, NULL, &tv);
      return FD_ISSET(STDIN_FILENO, &rdfs);
    }

    bool run = true;
    CliSession& session;
    termios oldt;
    termios newt;
    std::string currentLine;
    std::unique_ptr<std::thread> servant;
};

/////////////

int main()
{
    boost::asio::io_service ios;

    // setup cli

    auto rootMenu = make_unique< Menu >( "cli" );
    rootMenu -> Add(
            "hello",
            [](std::ostream& out){ out << "Hello, world\n"; },
            "Print hello world" );
    rootMenu -> Add(
            "answer",
            [](int x, std::ostream& out){ out << "The answer is: " << x << "\n"; },
            "Print the answer to Life, the Universe and Everything " );

    auto subMenu = make_unique< Menu >( "sub" );
    subMenu -> Add(
            "hello",
            [](std::ostream& out){ out << "Hello, submenu world\n"; },
            "Print hello world in the submenu" );
    rootMenu -> Add( std::move(subMenu) );


    Cli cli( std::move(rootMenu) );
    // global exit action
    cli.ExitAction( [](auto& out){ out << "Goodbye and thanks for all the fish.\n"; } );

    CliSession session( cli, std::cout );
    session.ExitAction( [&ios](auto& out) // session exit action
            {
                out << "Closing App...\n";
                ios.stop();
            } );
    //AsyncInput ac( ios, session );
    PollKeyboardInput ac(session);

    // setup server

    CliServer server( ios, 5000, cli );
    // exit action for all the connections
    server.ExitAction( [](auto& out) { out << "Terminating this session...\n"; } );
    ios.run();

    return 0;
}
