/*******************************************************************************
 * CLI - A simple command line interface.
 * Copyright (C) 2016 Daniele Pallastrelli
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#include "cli/cli.h"
#include "cli/remotecli.h"
#include "cli/server.h"

using namespace cli;
using namespace std;

/////////////


class AsyncInput
{
public:
    AsyncInput( boost::asio::io_service& ios, CliSession& _session ) :
        session( _session ),
        input( ios, ::dup( STDIN_FILENO ) )
    {
        session.Add( "exit", [this](std::ostream&){ session.Exit(); }, "Quit the application" );
        Read();
    }
    ~AsyncInput()
    {
        input.close();
    }

private:

    void Read()
    {
        session.Prompt();
        // Read a line of input entered by the user.
        boost::asio::async_read_until(
            input,
            inputBuffer,
            '\n',
            std::bind( &AsyncInput::NewLine, this,
                       std::placeholders::_1,
                       std::placeholders::_2 )
        );
    }

    void NewLine( const boost::system::error_code& error, std::size_t length )
    {
        if ( !error || error == boost::asio::error::not_found )
        {
            auto bufs = inputBuffer.data();
            std::size_t size = length;
            if ( !error ) --size; // tolgo il \n
            std::string s( boost::asio::buffers_begin( bufs ), boost::asio::buffers_begin( bufs ) + size );
            inputBuffer.consume( length );


            if ( session.Feed( s ) ) Read();
        }
        else
        {
            input.close();
        }
    }

    CliSession& session;
    boost::asio::streambuf inputBuffer;
    boost::asio::posix::stream_descriptor input;
};

/////////////

#include <stdio.h>
#include <termios.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/time.h>
#include <thread>

enum class KeyType { ascii, up, down, left, right, backspace, canc, home, end, ignored };

class LinuxKeyboard
{
public:
    using Handler = std::function< void( std::pair<KeyType,char> ) >;

    LinuxKeyboard( boost::asio::io_service& ios, Handler h ) :
        ioService(ios), handler(h)
    {
        ToManualMode();
        servant = std::make_unique<std::thread>( [this](){ Read(); } );
        servant -> detach();
    }
    ~LinuxKeyboard()
    {
        run = false;
        ToStandardMode();
    }

private:

    void Read()
    {
        while ( run )
        {
            auto k = Get();
            ioService.post( [this,k](){ handler(k); } );
        }
    }

    std::pair<KeyType,char> Get()
    {
        while ( !KbHit() ) {}
        int ch = getchar();
        switch( ch )
        {
            case 127: return std::make_pair(KeyType::backspace,' '); break;
            case 27: // symbol
                ch = getchar();
                if ( ch == 91 ) // arrow keys
                {
                    ch = getchar();
                    switch( ch )
                    {
                        case 51:
                            ch = getchar();
                            if ( ch == 126 ) return std::make_pair(KeyType::canc,' ');
                            else return std::make_pair(KeyType::ignored,' ');
                            break;
                        case 65: return std::make_pair(KeyType::up,' '); break;
                        case 66: return std::make_pair(KeyType::down,' '); break;
                        case 68: return std::make_pair(KeyType::left,' '); break;
                        case 67: return std::make_pair(KeyType::right,' '); break;
                        case 70: return std::make_pair(KeyType::end,' '); break;
                        case 72: return std::make_pair(KeyType::home,' '); break;
                    }
                }
                break;
            default: // ascii
            {
                const char c = static_cast<char>(ch);
                return std::make_pair(KeyType::ascii,c);
            }
        }
        return std::make_pair(KeyType::ignored,' ');
    }

    void ToManualMode()
    {
        tcgetattr( STDIN_FILENO, &oldt );
        newt = oldt;
        newt.c_lflag &= ~( ICANON | ECHO );
        tcsetattr( STDIN_FILENO, TCSANOW, &newt );
    }
    void ToStandardMode()
    {
        tcsetattr( STDIN_FILENO, TCSANOW, &oldt );
    }

    static int KbHit()
    {
      struct timeval tv;
      fd_set rdfs;

      tv.tv_sec = 1;
      tv.tv_usec = 0;

      FD_ZERO(&rdfs);
      FD_SET (STDIN_FILENO, &rdfs);

      select(STDIN_FILENO+1, &rdfs, NULL, NULL, &tv);
      return FD_ISSET(STDIN_FILENO, &rdfs);
    }

    termios oldt;
    termios newt;
    boost::asio::io_service& ioService;
    Handler handler;
    atomic<bool> run{ true };
    std::unique_ptr< std::thread > servant;
};


enum class Symbol { command, up, down, tab };

template < typename Keyboard >
class Terminal
{
public:

    using Handler = std::function< void( std::pair<Symbol,std::string> ) >;

    Terminal( boost::asio::io_service& ios, Handler h ) :
        keyboard( ios, [this](auto k){ Keypressed(k); } ),
        handler(h)
    {}

    void SetLine( const std::string& newLine )
    {
        std::cout << std::string( position, '\b' ) << newLine << std::flush;

        // if newLine is shorter then currentLine, we have
        // to clear the rest of the string
        if ( newLine.size() < currentLine.size() )
        {
            std::cout << std::string( currentLine.size() - newLine.size(), ' ' );
            // and go back
            std::cout << std::string( currentLine.size() - newLine.size(), '\b' ) << std::flush;
        }

        currentLine = newLine;
        position = currentLine.size();
    }

private:

    void Keypressed( std::pair< KeyType, char > k )
    {
        switch ( k.first )
        {
            case KeyType::backspace:
            {
                if ( position == 0 ) break;

                --position;
                // remove the char from buffer
                currentLine.erase( currentLine.begin()+position );
                // go back to the previous char
                std::cout << '\b';
                // output the rest of the line
                std::cout << std::string( currentLine.begin()+position, currentLine.end() );
                // remove last char
                std::cout << ' ';
                // go back to the original position
                std::cout << std::string( currentLine.size()-position+1, '\b' ) << std::flush;
                break;
            }
            case KeyType::up:
                handler( std::make_pair(Symbol::up,std::string{}) );
                break;
            case KeyType::down:
                handler( std::make_pair(Symbol::down,std::string{}) );
                break;
            case KeyType::left:
                if ( position > 0 )
                {
                    std::cout << '\b' << std::flush;
                    --position;
                }
                break;
            case KeyType::right:
                if ( position < currentLine.size() )
                {
                    std::cout << currentLine[position] << std::flush;
                    ++position;
                }
                break;
            case KeyType::ascii:
            {
                const char c = static_cast<char>(k.second);
                if ( c == '\n' )
                {
                    std::cout << std::endl;
                    auto cmd = currentLine;
                    currentLine.clear();
                    position = 0;
                    handler( std::make_pair(Symbol::command, cmd) );
                }
                else if ( c == '\t' )
                    handler( std::make_pair(Symbol::tab, std::string()) );
                else
                {
                    // output the new char:
                    std::cout << c;
                    // and the rest of the string:
                    std::cout << std::string( currentLine.begin()+position, currentLine.end() );

                    // go back to the original position
                    std::cout << std::string( currentLine.size()-position, '\b' ) << std::flush;

                    // update the buffer and cursor position:
                    currentLine.insert( currentLine.begin()+position, c );
                    ++position;
                }

                break;
            }
            case KeyType::canc:
            {
                if ( position == currentLine.size() ) break;

                // output the rest of the line
                std::cout << std::string( currentLine.begin()+position+1, currentLine.end() );
                // remove last char
                std::cout << ' ';
                // go back to the original position
                std::cout << std::string( currentLine.size()-position, '\b' ) << std::flush;
                // remove the char from buffer
                currentLine.erase( currentLine.begin()+position );
                break;
            }
            case KeyType::end:
            {
                std::cout << std::string( currentLine.begin()+position, currentLine.end() ) << std::flush;
                position = currentLine.size();
                break;
            }
            case KeyType::home:
            {
                std::cout << std::string( position, '\b' ) << std::flush;
                position = 0;
                break;
            }
            case KeyType::ignored:
                // TODO
                break;
        }

    }

    Keyboard keyboard;
    Handler handler;
    std::string currentLine;
    std::size_t position = 0; // next writing position in currentLine
};

class PollKeyboardInput
{
public:
    PollKeyboardInput(boost::asio::io_service& ios, CliSession& _session) :
        session( _session ),
        terminal( ios, [this](auto cmd){ NewCommand(cmd); } )
    {
        session.Add( "exit", [this](std::ostream&){ session.Exit(); }, "Quit the application" );
        session.Prompt();
    }

private:

    void NewCommand( std::pair< Symbol, std::string > s )
    {
        switch ( s.first )
        {
            case Symbol::command:
                if ( session.Feed( s.second ) )
                    session.Prompt();
                break;
            case Symbol::down:
                terminal.SetLine( session.NextCmd() );
                break;
            case Symbol::up:
                terminal.SetLine( session.PreviousCmd() );
                break;
            case Symbol::tab:
                break;
        }

    }

    CliSession& session;
    Terminal< LinuxKeyboard > terminal;
};

/////////////

int main()
{
    boost::asio::io_service ios;

    // setup cli

    auto rootMenu = make_unique< Menu >( "cli" );
    rootMenu -> Add(
            "hello",
            [](std::ostream& out){ out << "Hello, world\n"; },
            "Print hello world" );
    rootMenu -> Add(
            "answer",
            [](int x, std::ostream& out){ out << "The answer is: " << x << "\n"; },
            "Print the answer to Life, the Universe and Everything " );

    auto subMenu = make_unique< Menu >( "sub" );
    subMenu -> Add(
            "hello",
            [](std::ostream& out){ out << "Hello, submenu world\n"; },
            "Print hello world in the submenu" );
    rootMenu -> Add( std::move(subMenu) );


    Cli cli( std::move(rootMenu) );
    // global exit action
    cli.ExitAction( [](auto& out){ out << "Goodbye and thanks for all the fish.\n"; } );

    CliSession session( cli, std::cout );
    session.ExitAction( [&ios](auto& out) // session exit action
            {
                out << "Closing App...\n";
                ios.stop();
            } );

    //AsyncInput ac( ios, session );
    PollKeyboardInput ac(ios, session);

    // setup server

    CliServer server( ios, 5000, cli );
    // exit action for all the connections
    server.ExitAction( [](auto& out) { out << "Terminating this session...\n"; } );
    ios.run();

    return 0;
}
